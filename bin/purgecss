#!/usr/bin/env node
var yargs = require("yargs"),
    fs = require("fs"),
    Purgecss = require("../lib/purgecss.js")

var yargsBin,
    argv,
    options

yargsBin = yargs
    .usage("$0 --css <css> --content <content> [option]")
    .option("con", {
        alias: "content",
        description: "glob of content files",
        type: "array"
    })
    .option("css", {
        alias: "css",
        description: "glob of css files",
        type: "array"
    })
    .option("c", {
        alias: "config",
        description: "configuration file",
        type: "string"
    })
    .option("o", {
        alias: "out",
        description: "Filepath directory to write purified css files to",
        type: "string"
    })
    .option("w", {
        alias: "whitelist",
        description: "List of classes that should not be removed",
        type: "array",
        default: []
    })
    .demandCommand(0)
    .help()
    .alias("h", "help")
    .version()
    .alias("v", "version")
argv = yargs.argv

options = {
    content: argv.content,
    css: argv.css,
    whitelist: argv.whitelist
}

var purgecss;
if ((typeof argv.config === "undefined") && (typeof argv.css === "undefined" || typeof argv.content === "undefined")) {
    yargsBin.showHelp("log")
    return
}

purgecss = new Purgecss(argv.config ? Object.assign(options, {config: argv.config}) : options)

if (argv.out) {
    var result = purgecss.purge()
    for (var i = 0; i < result.length; i++) {
        var filename = result[i].file.split("/").pop()
        fs.writeFile(argv.out + "/" + filename, result[i].css, function(err) {
            if (err) console.error(err.message)
        })
    }
} else {
    console.log(purgecss.purge())
}